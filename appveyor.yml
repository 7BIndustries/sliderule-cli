image: Visual Studio 2017
environment:
  nodejs_version: "Current"
  RUSTFLAGS: -Ctarget-feature=+crt-static
  matrix:
  - TARGET: x86_64-pc-windows-msvc
    ALLOW_PR: 1
  - TARGET: i686-pc-windows-msvc
  - TARGET: i686-pc-windows-msvc
    BUILD_MSI: 1
  - TARGET: i686-pc-windows-gnu
    MINGW_DIR: mingw32
  - TARGET: x86_64-pc-windows-gnu
    MINGW_DIR: mingw64
  access_token:
    secure: q8Wqx0brgfpOYFQqWauvucE2h0o1WYb41a3gKaCKV9QiE4eTz6qLNlqyC3mdsp4Q

install:
  # Install MSYS2 and MINGW (32-bit & 64-bit)
  - ps: |
      # Check if MSYS2 was restored from cache
      if($env:MINGW_DIR) {
        if($env:MINGW_DIR -eq "mingw32") {
          # Download and install MINGW (32-bit)
          Write-Host "Installing MinGW (32-bit)..." -ForegroundColor Cyan
          Write-Host "Downloading installation package..."
          appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z -FileName mingw.7z
        } elseif($env:MINGW_DIR -eq "mingw64") {
          # Download and install MINGW (64-bit)
          Write-Host "Installing MinGW (64-bit)..." -ForegroundColor Cyan
          Write-Host "Downloading installation package..."
          appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z -FileName mingw.7z
        }
        Write-Host "Extracting installation package..."
        7z x -y mingw.7z -oC:\msys64 | Out-Null
        del mingw.7z
      } else {
        Write-Host "MSYS2 not required" -ForegroundColor Green
      }

  # Install rust, x86_64-pc-windows-msvc host
  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init.exe -y --default-host=x86_64-pc-windows-msvc
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin

  # Install the target we're compiling for
  - if NOT "%TARGET%" == "x86_64-pc-windows-msvc" rustup target add %TARGET%

  # add mingw to PATH if necessary
  - if defined MINGW_DIR set PATH=C:\msys64\%MINGW_DIR%\bin;C:\msys64\usr\bin;%PATH%

  # set cargo features for MSI if requested (otherwise empty string)
  - set FEATURES=
  - if defined BUILD_MSI set FEATURES=--features msi-installed

  # Node
  - ps: Install-Product node $env:nodejs_version

  # let's see what we got
  - where gcc rustc cargo
  - rustc -vV
  - cargo -vV

build: false

test_script:
  - cargo test --release

after_test:
  - taskkill /F /IM git
  - taskkill /F /IM git-daemon